/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react"
import { getFullPath } from "@/helpers/pathHelper"
import { useGLTF } from "@react-three/drei"
import { useFrame } from "@react-three/fiber"
import * as THREE from "three"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
    Object_9: THREE.Mesh
    Back_Wheel: THREE.Mesh
    Front_Wheel: THREE.Mesh
  }
  materials: {
    Base: THREE.MeshStandardMaterial
    Front_Wheel_Material: THREE.MeshStandardMaterial
    TeslaFrontLight: THREE.MeshStandardMaterial
    TeslaRearLight: THREE.MeshStandardMaterial
    ["Material.004"]: THREE.MeshStandardMaterial
    ["Material.001"]: THREE.MeshStandardMaterial
  }
}

// @ts-expect-error temp ignore
export function TeslaCyberTruckOld(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    getFullPath("/tesla_cybertruck-transformed.glb")
  ) as GLTFResult

  // Refs for the front and back wheels
  const frontWheelRef = useRef<THREE.Mesh>(null!)
  const backWheelRef = useRef<THREE.Mesh>(null!)

  // Rotate wheels in animation loop
  useFrame((state) => {
    const t = state.clock.getElapsedTime() // Time elapsed
    const rotationSpeed = -4 * t // Adjust rotation speed as needed
    if (frontWheelRef.current) frontWheelRef.current.rotation.y = rotationSpeed
    if (backWheelRef.current) backWheelRef.current.rotation.y = rotationSpeed
  })

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={materials.Base}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_5.geometry}
        material={materials.Front_Wheel_Material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_6.geometry}
        material={materials.TeslaFrontLight}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_7.geometry}
        material={materials.TeslaRearLight}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_8.geometry}
        material={materials["Material.004"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_9.geometry}
        material={materials["Material.001"]}
      />
      <mesh
        ref={backWheelRef}
        castShadow
        receiveShadow
        geometry={nodes.Back_Wheel.geometry}
        material={materials.Front_Wheel_Material}
        position={[-1.121, -0.185, -0.007]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.17, 0.135, 0.17]}
      />
      <mesh
        ref={frontWheelRef}
        castShadow
        receiveShadow
        geometry={nodes.Front_Wheel.geometry}
        material={materials.Front_Wheel_Material}
        position={[1.166, -0.185, -0.007]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.17, 0.14, 0.17]}
      />
    </group>
  )
}

useGLTF.preload(getFullPath("/tesla_cybertruck-transformed.glb"))
